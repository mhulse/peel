package com.registerguard.peel {		import flash.display.MovieClip;	import flash.display.SimpleButton;	import flash.display.DisplayObject;	import flash.filters.GlowFilter;	import flash.filters.BitmapFilterQuality;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.MouseEvent;		import gs.TweenLite;		public class Main extends MovieClip {				// Private:		private var _load:Load;		private var _cookie:Cookie;		private var _timing:Timing;		private var _clickTag:ClickTag;		private var _mainMc:MainMc;		private var _clickMc:MovieClip;		private var _peelMc:MovieClip;		private var _maskMc:MovieClip;		private var _contentMc:MovieClip;		private var _adMc:MovieClip;		private var _adMcLoad:MovieClip;		private var _teaseMc:MovieClip;		private var _teaseMcLoad:MovieClip;		private var _closeBtn:SimpleButton;		private var _rewind:Boolean;		private var _flag:Boolean;				/**		* Main()		*        About: Class constructor.		*      Returns: Nothing.		*/		public function Main() {						trace('Main() instantiated...');						init();					};				/**		* init()		*        About: Load external assets and then continue program.		*      Returns: Nothing.		*/		private function init():void {						// Load():			_load = new Load(this);			_load.addEventListener(Load.LOAD_COMPLETE, onLoadComplete, false, 0, true); // Wait for loading to complete.					};				/**		* onLoadComplete()		*        About: Event listener, called when loading completed.		*      Returns: Nothing.		*/		private function onLoadComplete(e:Event):void {						trace('Load complete...');						_load.removeEventListener(Load.LOAD_COMPLETE, onLoadComplete); // GC.						// Instantiate custom classes:			var stager:Stager = new Stager(this); // Setup stage.			_cookie = new Cookie("peel062509"); // SO.			_clickTag = new ClickTag(this); // Clicktag.						// Initialize:			_flag = false;						// Setup our primary movieclip:			_mainMc = new MainMc(); // Create new instance.						// Object lookups:			_clickMc = _mainMc.click_mc;			_peelMc = _mainMc.peel_mc;			_maskMc = _mainMc.mask_mc;			_contentMc = _mainMc.content_mc;			_teaseMc = _contentMc.tease_mc;			_adMc = _contentMc.ad_mc;			_closeBtn = _peelMc.close_btn;						// Other setup:			_mainMc.x = 600; // Position.			_mainMc.y = 0; // IBID.			glow(_mainMc); // Apply glow.						_clickMc.addEventListener(MouseEvent.CLICK, onClick, false, 0, true); // http://www.kirupa.com/forum/showthread.php?t=260312			_clickMc.buttonMode = true; // Button mode.			_clickMc.useHandCursor = true;						// http://livedocs.adobe.com/flash/9.0/main/wwhelp/wwhimpl/common/html/wwhelp.htm?context=LiveDocs_Parts&file=00000216.html			_adMcLoad = MovieClip(_load.pre.objects[0]); // Cast 'DisplayObject' to 'MovieClip'.			_adMcLoad.stop(); // Stop until told to play.			_adMc.addChild(_adMcLoad); // Add to movieclip stage.						// IBID			_teaseMcLoad = MovieClip(_load.pre.objects[1]);			_teaseMc.addChild(_teaseMcLoad);						this.addChild(_mainMc); // Add to display list.						// Begin program:			peeler();					};				private function glow(o:Object):void {						var glow:GlowFilter = new GlowFilter();						glow.color = 0x000000;			glow.alpha = 1;			glow.blurX = 25;			glow.blurY = 25;			glow.strength = 0.5;			glow.inner = false;			glow.knockout = false;			glow.quality = BitmapFilterQuality.LOW;						o.filters = new Array(glow);					};				/**		* peeler()		*        About: Launching pad for the differnt events.		*      Returns: Nothing.		*/		private function peeler():void {						// Event.ENTER_FRAME event listener:			_mainMc.addEventListener(Event.ENTER_FRAME, onEnter, false, 0, true);						if (_cookie.cookieExists() == false) {								_flag = true;								// Set cookie:				_cookie.cookieSet();								// Hide:				TweenLite.to(_teaseMc, .5, { autoAlpha: 0 });								// First time visit, open the peel:				_clickMc.play();				_peelMc.play();				_maskMc.play();				_adMcLoad.gotoAndPlay(1);							} else {								// Setup event listeners:				_mainMc.addEventListener(MouseEvent.ROLL_OVER, onOver, false, 0, true);				_mainMc.addEventListener(MouseEvent.ROLL_OUT, onOut, false, 0, true);							}					};				/**		* onPeelOpened()		*        About: Fired when peel is fully opened.		*      Returns: Nothing.		*/		private function peelOpened():void {						// GC:			_mainMc.removeEventListener(Event.ENTER_FRAME, onEnter);			_mainMc.removeEventListener(MouseEvent.ROLL_OVER, onOver);			_mainMc.removeEventListener(MouseEvent.ROLL_OUT, onOut);						// Setup the close button:			_closeBtn.addEventListener(MouseEvent.MOUSE_UP, onPeelClosed, false, 0, true);						// Timer:			_timing = new Timing(10000);			_timing.addEventListener(Timing.TIMING_COMPLETE, onPeelClosed, false, 0, true);					};				/**		* onEnter()		*        About: Handles Event.ENTER_FRAME event.		*      Returns: Nothing.		*/		private function onEnter(e:Event):void {						if (_peelMc.currentFrame == 1) {								// Bools:				_flag = false;				_rewind = false;								// Play:				_clickMc.play();				_peelMc.play();				_maskMc.play();							} else if (!_flag && (_peelMc.currentLabel != 'loop')) {								// Loop:				_clickMc.gotoAndPlay('loop');				_peelMc.gotoAndPlay('loop');				_maskMc.gotoAndPlay('loop');							} else if (_rewind == true) {								// Rewind:				_clickMc.prevFrame();				_peelMc.prevFrame();				_maskMc.prevFrame();							} else {								// If peel is opened, call onPeelOpened(), otherwise trace current frame number:				(_peelMc.currentLabel == "finish") ? peelOpened() : trace(_peelMc.currentFrame);							}					};				/**		* onOver()		*        About: Handles MouseEvent.ROLL_OVER event.		*      Returns: Nothing.		*/		private function onOver(e:Event):void {						// Bools:			_flag = true;			_rewind = false;						// Hide:			TweenLite.to(_teaseMc, .5, { autoAlpha: 0 });						// Play:			_clickMc.play();			_peelMc.play();			_maskMc.play();						_adMcLoad.play();					};				/**		* onOut()		*        About: Handles MouseEvent.ROLL_OVER event.		*      Returns: Nothing.		*/		private function onOut(e:Event):void {						// Bools:			_flag = true;			_rewind = true;						// Listen for first frame:			_peelMc.addEventListener(Event.ENTER_FRAME, onFirstFrame, false, 0, true);					};				/**		* onUp()		*        About: Handles MouseEvent.MOUSE_UP event for peel close button.		*      Returns: Nothing.		*/		private function onPeelClosed(e:Event):void {						// GC:			_closeBtn.removeEventListener(MouseEvent.MOUSE_UP, onPeelClosed);			_timing.removeEventListener(Timing.TIMING_COMPLETE, onPeelClosed);						// Bools:			_rewind = true;						// Listen for first frame:			_peelMc.addEventListener(Event.ENTER_FRAME, onFirstFrame, false, 0, true);						// Launching pad:			peeler();					};				/**		* onFirstFrame()		*        About: Event listener method to check for first frame.		*      Returns: Nothing.		*/		private function onFirstFrame(e:Event):void {						// First frame?			if (e.target.currentFrame == 1) {								// GC:				e.target.removeEventListener(Event.ENTER_FRAME, onFirstFrame);								// Show our tease movie:				TweenLite.to(_teaseMc, 1, { autoAlpha: 1, onComplete:onFinishTween });							}					};				/**		* onFinishTween()		*        About: Callback method for TweenLite first frame check.		*      Returns: Nothing.		*/		private function onFinishTween():void {						// Reset the loaded ad:			_adMcLoad.gotoAndStop(1);					};				private function onClick(e:MouseEvent):void {						trace('clicked');						_clickTag.getURL();					};			};	};