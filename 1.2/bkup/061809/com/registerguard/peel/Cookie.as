package com.registerguard.peel {		import flash.net.SharedObject;		public class Cookie {				public var _status:Boolean;				private var _so:SharedObject;		private var _name:String;		private var _lastVisit:Number;				/**		* Cookie()		*        About: Class constructor.		*      Returns: Nothing.		*/		public function Cookie(n:String = "so") {						trace('Cookie() instantiated...');						_name = n;						init();					};				/**		* init()		*        About: Initialize.		*      Returns: Nothing.		*/		private function init():void {						_so = SharedObject.getLocal(_name, "/");					};				/**		* cookieCheck()		*        About: Check if cookie has expired.		*      Returns: Boolean, true (SO expired), false (SO not expired).		*       @param: Number, milliseconds.		*/		public function cookieCheck(expireTime:Number = 600000):Boolean {						// http://bit.ly/arqh4			// 1 hour = 3600000			// 10 minutes = 600000						var r:Boolean = false;						var created:Number = _so.data.created;			var expires:Number = new Date().time - expireTime;						if (created < expires) {								trace("SO expired...");								r = true;							} else {								trace("SO set to expire in " + Number((created - expires) / 1000 / 60).toPrecision(2) + " minutes...");							}						return r;					};				/**		* cookieSet()		*        About: Sets SO "created" property with current time value in milliseconds.		*      Returns: Boolean, true (SO created), false (SO not created).		*/		public function cookieSet():Boolean {						var r:Boolean = false;						if (cookieExists() == false) {								// If SO does not exist, create one:								trace("SO created...");								_so.data.created = new Date().time;				_so.flush();								r = true;							} else {								// Cookies already exists.								trace("SO exists...");							}						return r;					};				/**		* cookieExists()		*        About: Checks to see if SO exists.		*      Returns: Boolean, true (SO exists), false (SO does not exist).		*/		public function cookieExists():Boolean {						return (_so.size > 0) ? true : false;					};				/**		* cookieDelete()		*        About: Deletes SO.		*      Returns: Boolean, true (SO deleted), false (SO not deleted).		*/		public function cookieDelete():Boolean {						var r:Boolean = false;						if (cookieExists() == true) {								_so.clear();								r = true;							} else {								// Cookies already exists.								trace("No cookie to delete...");							}						return r;					};				/**		* cookieStats()		*        About: Returns SO statistics.		*      Returns: Nothing.		*/		public function cookieStats():void {						if (cookieExists() == true) {								var ageMS:Number = new Date().time - _so.data.created;								trace("SharedObject was created " + Number(ageMS / 1000 / 60).toPrecision(2) + " minutes ago...");				trace("SharedObject is " + _so.size + " bytes...");							} else {								trace("No cookie to gather statistics from...");							}					};			};	};