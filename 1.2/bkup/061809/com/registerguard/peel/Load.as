package com.registerguard.peel {		import flash.display.MovieClip;	import flash.net.URLRequest;	import flash.display.Loader;	import flash.display.LoaderInfo;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.ProgressEvent;		public class Load extends EventDispatcher {				// Constant:		public static const LOAD_COMPLETE:String = 'load_completed';				// Private:		private var _pre:Preload;		private var _this:Object;				/**		* Load()		*        About: Class constructor.		*      Returns: Nothing.		*/		public function Load(t:Object) {						trace('Load() instantiated...');						_this = t;						init();					};				private function init():void {						// Load movie:			_this.root.loaderInfo.addEventListener(ProgressEvent.PROGRESS, onLoadProgress, false, 0, true);			_this.root.loaderInfo.addEventListener(Event.COMPLETE, onLoadComplete, false, 0, true);					};				private function onLoadProgress(event:ProgressEvent):void {						var bl:uint = event.bytesLoaded;			var bt:uint = event.bytesTotal;			var percentLoaded:int = Math.floor((bl / bt) * 100);						trace(percentLoaded);					};				private function onLoadComplete(event:Event):void {						// Movie loaded, garbage collection:			_this.loaderInfo.removeEventListener(ProgressEvent.PROGRESS, onLoadProgress);			_this.loaderInfo.removeEventListener(Event.COMPLETE, onLoadComplete);						// Get embed params:			var p:Params = new Params(_this);						// Instantiate Preload() class:			_pre = new Preload(				[				 	//p.getParam("advert", "http://assets.registerguard.com/demos/as3/advert.swf"), 					//p.getParam("tease", "http://assets.registerguard.com/demos/as3/tease.swf")				 	p.getParam("advert", "advert.swf"), 					p.getParam("tease", "tease.swf")				]			);			// http://code.google.com/p/as3-multiple-file-preloader/						// Preload event listener:			_pre.addEventListener("preloadComplete", onPreloadComplete, false, 0, true);					}				private function onPreloadComplete(e:Event):void {						_pre.removeEventListener("preloadComplete", onPreloadComplete); // Garbage collect.						trace(_pre.objects); // Loaded objects as an array.						// Everything loaded!			this.dispatchEvent(new Event(Load.LOAD_COMPLETE));					};				public function get pre():Preload {						return _pre; // Access loaded clips: _pre.objects					};			};	};