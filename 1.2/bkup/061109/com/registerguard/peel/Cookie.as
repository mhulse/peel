package com.registerguard.peel {		import flash.net.SharedObject;		public class Cookie {				public var _status:Boolean;				private var _so:SharedObject;		private var _name:String;		private var _lastVisit:Number;				public function Cookie(n:String = "so"):void {						_name = n;						init();					};				private function init():void {						_so = SharedObject.getLocal(_name, "/");					};				public function cookieManager(type:String):Boolean {						var r:Boolean = false;						switch (type) {								case "check" :					r = cookieCheck();					break;				case "set" :					r = cookieSet();					break;				case "delete" :					r = cookieDelete();					break;				case "stats" :					r = cookieStats();								}						return r;					};				public function cookieCheck(expireTime:Number = 600000):Boolean {						// http://bit.ly/arqh4			// 1 hour = 3600000			// 10 minutes = 600000						var r:Boolean = false;						var created:Number = _so.data.created;			var expires:Number = new Date().time - expireTime;						if (created < expires) {								trace("SO expired...");								r = true;							} else {								trace("SO set to expire in " + Number((created - expires) / 1000 / 60).toPrecision(2) + " minutes...");							}						return r;					};				public function cookieSet():Boolean {						var r:Boolean = false;						if (_so.size == 0) {								trace("SO created...");								_so.data.created = new Date().time;				_so.flush();								r = true;							} else {								trace("SO exists...");							}						return r;					}				public function cookieDelete():Boolean {						_so.clear();						return true;					}				public function cookieStats():Boolean {						var ageMS:Number = new Date().time - _so.data.created;						trace("SharedObject was created " + Number(ageMS / 1000 / 60).toPrecision(2) + " minutes ago...");			trace("SharedObject is " + _so.size + " bytes...");						return true;					};			};	};